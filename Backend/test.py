import unittest
from unittest.mock import MagicMock
from backend import app
questions = {"Resultado":[{"a":"Composite pattern","b":"Facade pattern","c":"Flyweight pattern","correct":"b","d":"Bridge pattern","question":"Which design pattern is used to provide a simple interface for a complex system of classes and objects?"},{"a":"Observer pattern","b":"MVC pattern","c":"Singleton pattern","correct":"b","d":"Prototype pattern","question":"Which architectural pattern separates the application logic into three interconnected components: the model, the view, and the controller?"},{"a":"Abstract Factory pattern","b":"Builder pattern","c":"Factory Method pattern","correct":"d","d":"Prototype pattern","question":"Which design pattern is used to create objects without directly specifying their classes?"},{"a":"Singleton pattern","b":"Adapter pattern","c":"Decorator pattern","correct":"a","d":"Proxy pattern","question":"Which design pattern ensures a class has only one instance and provides a global point of access to it?"},{"a":"Composite pattern","b":"Strategy pattern","c":"Observer pattern","correct":"c","d":"Mediator pattern","question":"Which design pattern is used to encapsulate the way a set of objects interact to form a complex system?"},{"a":"Chain of Responsibility pattern","b":"Facade pattern","c":"Flyweight pattern","correct":"a","d":"Bridge pattern","question":"Which architectural pattern is used to handle requests by chaining together processing elements called filters?"},{"a":"Strategy pattern","b":"State pattern","c":"Template Method pattern","correct":"b","d":"Visitor pattern","question":"Which design pattern allows an object to alter its behavior when its internal state changes?"},{"a":"Adapter pattern","b":"Proxy pattern","c":"Decorator pattern","correct":"b","d":"Iterator pattern","question":"Which design pattern is used to provide a surrogate or placeholder for another object to control access to it?"},{"a":"Repository pattern","b":"Dependency Injection pattern","c":"Command pattern","correct":"d","d":"Model-View-Controller (MVC) pattern","question":"Which architectural pattern separates the user interface and application logic from the underlying data storage and manipulation?"},{"a":"Command pattern","b":"Iterator pattern","c":"Template Method pattern","correct":"d","d":"Strategy pattern","question":"Which design pattern allows an algorithm to be defined in a class and selected at runtime?"},{"a":"Composite pattern","b":"Adapter pattern","c":"Observer pattern","correct":"b","d":"Prototype pattern","question":"Which design pattern is used to convert the interface of a class into another interface that clients expect?"},{"a":"Event Sourcing pattern","b":"Microservices pattern","c":"CQRS pattern","correct":"b","d":"Proxy pattern","question":"Which architectural pattern is used to break a complex system into smaller, more manageable parts called microservices?"},{"a":"Observer pattern","b":"Composite pattern","c":"Flyweight pattern","correct":"d","d":"Strategy pattern","question":"Which design pattern is used to define a family of algorithms, encapsulate each one, and make them interchangeable?"},{"a":"Template Method pattern","b":"Mediator pattern","c":"Chain of Responsibility pattern","correct":"a","d":"Factory Method pattern","question":"Which design pattern is used to define the skeleton of an algorithm, allowing subclasses to provide certain steps?"},{"a":"Mediator pattern","b":"Singleton pattern","c":"Observer pattern","correct":"a","d":"Command pattern","question":"Which architectural pattern allows communication between components through a central event dispatcher?"},{"a":"Abstract Factory pattern","b":"Builder pattern","c":"Factory Method pattern","correct":"c","d":"Prototype pattern","question":"Which design pattern is used to encapsulate the creation of objects, letting subclasses decide which classes to instantiate?"},{"a":"Repository pattern","b":"Chain of Responsibility pattern","c":"Dependency Injection pattern","correct":"d","d":"Data Flow pattern","question":"Which architectural pattern provides a structured way to represent the flow of data through a system?"},{"a":"Bridge pattern","b":"Proxy pattern","c":"Observer pattern","correct":"d","d":"Composite pattern","question":"Which design pattern is used to encapsulate the way a set of objects interact while allowing them to vary independently?"},{"a":"Adapter pattern","b":"Command pattern","c":"Facade pattern","correct":"d","d":"Bridge pattern","question":"Which design pattern is used to decouple an abstraction from its implementation, allowing them to vary independently?"},{"a":"Chain of Responsibility pattern","b":"Prototype pattern","c":"Singleton pattern","correct":"a","d":"Flyweight pattern","question":"Which architectural pattern is used to handle a request by passing it through a chain of processing objects?"},{"a":"State pattern","b":"Memento pattern","c":"Observer pattern","correct":"c","d":"Visitor pattern","question":"Which design pattern is used to maintain a list of dependents and notify them automatically of any state changes?"},{"a":"Composite pattern","b":"Strategy pattern","c":"State pattern","correct":"c","d":"Proxy pattern","question":"Which design pattern is used to enable an object to alter its behavior when the state changes?"},{"a":"Observer pattern","b":"Proxy pattern","c":"Dependency Injection pattern","correct":"b","d":"Bridge pattern","question":"Which architectural pattern allows components to be replaced with alternative implementations at runtime?"},{"a":"Singleton pattern","b":"Decorator pattern","c":"Adapter pattern","correct":"a","d":"Factory Method pattern","question":"Which design pattern is used to ensure a class has only one instance and provides a global point of access to it?"},{"a":"Prototype pattern","b":"Strategy pattern","c":"Composite pattern","correct":"b","d":"Chain of Responsibility pattern","question":"Which design pattern is used to define a family of algorithms, encapsulate each one, and make them interchangeable?"},{"a":"Observer pattern","b":"Dependency Injection pattern","c":"Composite pattern","correct":"d","d":"Modular pattern","question":"Which architectural pattern separates the application into loosely coupled, highly cohesive modules?"},{"a":"Adapter pattern","b":"Decorator pattern","c":"Proxy pattern","correct":"c","d":"Iterator pattern","question":"Which design pattern is used to provide a simplified interface to a complex subsystem?"},{"a":"Prototype pattern","b":"Builder pattern","c":"Abstract Factory pattern","correct":"a","d":"Singleton pattern","question":"Which design pattern is used to create objects from a prototype instance, copying its properties?"},{"a":"Modular pattern","b":"Event Sourcing pattern","c":"Repository pattern","correct":"a","d":"Command pattern","question":"Which architectural pattern is used to allow an application to be divided into self-contained, reusable modules?"},{"a":"Singleton pattern","b":"Factory Method pattern","c":"Abstract Factory pattern","correct":"a","d":"Builder pattern","question":"Which design pattern is used to control the creation of objects and limit the number of instances that can be created?"},{"a":"Mediator pattern","b":"Chain of Responsibility pattern","c":"CQRS pattern","correct":"d","d":"Observer pattern","question":"Which architectural pattern is used to handle communication between components using events?"},{"a":"Composite pattern","b":"Strategy pattern","c":"Flyweight pattern","correct":"d","d":"Facade pattern","question":"Which design pattern is used to encapsulate the way a set of objects interact without making them tightly coupled?"},{"a":"Observer pattern","b":"State pattern","c":"Memento pattern","correct":"b","d":"Command pattern","question":"Which design pattern is used to allow an object to alter its behavior when the internal state changes?"},{"a":"Observer pattern","b":"Model-View-Controller (MVC) pattern","c":"Proxy pattern","correct":"b","d":"Chain of Responsibility pattern","question":"Which architectural pattern is used to separate the user interface from the business logic and data storage?"},{"a":"Mediator pattern","b":"Visitor pattern","c":"Composite pattern","correct":"a","d":"Chain of Responsibility pattern","question":"Which design pattern is used to encapsulate the way a set of objects interact by defining a set of protocols?"},{"a":"Prototype pattern","b":"Adapter pattern","c":"Decorator pattern","correct":"c","d":"Observer pattern","question":"Which design pattern is used to allow an object to alter its behavior by adding new functionality to it dynamically?"},{"a":"Command pattern","b":"Memento pattern","c":"Composite pattern","correct":"b","d":"Visitor pattern","question":"Which architectural pattern is used to store the history of an object's state changes?"},{"a":"Proxy pattern","b":"Iterator pattern","c":"Factory Method pattern","correct":"b","d":"Abstract Factory pattern","question":"Which design pattern is used to iterate over a collection of objects without exposing the underlying representation?"},{"a":"Microservices pattern","b":"Repository pattern","c":"Singleton pattern","correct":"a","d":"Dependency Injection pattern","question":"Which architectural pattern is used to allow an application to be split into smaller, interconnected components?"},{"a":"Composite pattern","b":"Facade pattern","c":"Flyweight pattern","correct":"b","d":"Bridge pattern","question":"Which design pattern is used to provide a simple interface for a complex system of classes and objects?"}]}
highScore = [{"email":"user@example.com","score":10,"score_name":"Lev"},{"email":"a01745696@tec.mx","score":10,"score_name":"YHR"},{"email":"maximocarrosco@gmail.com","score":5,"score_name":"nul"},{"email":"a01752023@tec.mx","score":3,"score_name":"JHA"}]
class FlaskAppTestCase(unittest.TestCase):
    def setUp(self):
        # Create a test client
        self.app = app.test_client()

    def test_questions(self):
        # Mock the MySQL connector and cursor
        mysql = MagicMock()
        cursor = MagicMock()
        cursor._iter_.return_value = [
            (1, "Question 1", "A", "B", "C", "D", "C"),
            (2, "Question 2", "A", "B", "C", "D", "A"),
        ]
        mysql.connector.connect.return_value = mysql
        mysql.cursor.return_value = cursor

        # Test the '/questions' route
        response = self.app.get('/questions')
        self.assertEqual(response.status_code, 200)
        expected_result = questions
        self.assertEqual(response.get_json(), expected_result)

    def test_get_high_score(self):
        # Mock the MySQL connector and curso
        mysql = MagicMock()
        cursor = MagicMock()
        cursor._iter_.return_value = [
            ("user1@example.com", 100, "AYH"),
            ("user2@example.com", 90, "PLL"),
        ]
        mysql.connector.connect.return_value = mysql
        mysql.cursor.return_value = cursor

        # Test the '/getHighScore' route
        response = self.app.get('/getHighScore')
        self.assertEqual(response.status_code, 200)
        expected_result = highScore
        self.assertEqual(response.get_json(), expected_result)

    def test_post_score(self):
        # Test the '/postScore' route
        response = self.app.get('/postScore?email=user@example.com&score=10&score_name=Lev')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.get_json(), "Score Created Correctly")


if __name__ == '__main__':
    unittest.main()